```python
### <stage constraints splitter> ###
### stage 1 sub-goal constraints
def stage_1_subgoal_constraint1():
    """constraints: <"grasp", "">"""
    return grasp("")

### <stage constraints splitter> ###
### stage 2 sub-goal constraints
def stage_2_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the center of the gripper of the robot", "the center of the body of the red button", "the center of the gripper of the robot is colinear with the normal of the center of the body of the red button by 10 cm">"""
    pc_gripper = get_point_cloud("the gripper of the robot", -1)
    pc_button = get_point_cloud("the body of the red button", -1)

    # Compute the center of the gripper and the button
    gripper_center = np.mean(pc_gripper, axis=0)
    button_center = np.mean(pc_button, axis=0)

    # Compute the normal vector of the button
    covariance_matrix_button = np.cov(pc_button.T)
    eigenvalues_button, eigenvectors_button = np.linalg.eig(covariance_matrix_button)
    button_normal = eigenvectors_button[:, np.argmin(eigenvalues_button)]
    if button_normal[np.argmax(button_normal)] < 0:
        button_normal = -button_normal

    # Compute the target position for the gripper
    target_position = button_center + button_normal * 0.1  # 10 cm along the button's normal

    # Compute the cost as the distance between the gripper center and the target position
    cost = np.linalg.norm(gripper_center - target_position)
    return cost

### <stage constraints splitter> ###
### stage 3 sub-goal constraints
def stage_3_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the center of the gripper of the robot", "the center of the body of the red button", "the center of the gripper of the robot moves toward the center of the body of the red button by 5 cm">"""
    pc_gripper_previous = get_point_cloud("the gripper of the robot", -2)
    pc_gripper_current = get_point_cloud("the gripper of the robot", -1)
    pc_button = get_point_cloud("the body of the red button", -1)

    # Compute the center of the gripper and the button
    gripper_previous_center = np.mean(pc_gripper_previous, axis=0)
    gripper_current_center = np.mean(pc_gripper_current, axis=0)
    button_center = np.mean(pc_button, axis=0)

    # Compute the direction vector from the gripper to the button
    direction_vector = button_center - gripper_previous_center
    direction_vector = direction_vector / np.linalg.norm(direction_vector)  # Normalize

    # Compute the target position for the gripper
    target_position = gripper_previous_center + direction_vector * 0.05  # Move 5 cm toward the button

    # Compute the cost as the distance between the gripper's current position and the target position
    cost = np.linalg.norm(gripper_current_center - target_position)
    return cost

### <stage constraints splitter> ###
### stage 3 flow constraints
def stage_3_flow_constraints():
    """constraints: <"flow constraint", "end task after pressing is completed">"""
    return None  # End task after this stage

### <stage constraints splitter> ###

# List of `geometry` of `the object part` of `the object` in all the <> brackets
object_to_segment = [
    "the gripper of the robot",
    "the body of the red button"
]
```