### <stage constraints splitter> ###
### stage 1 sub-goal constraints
def stage_1_subgoal_constraint1():
    """constraints: <"grasp", "">"""
    return grasp("")


### <stage constraints splitter> ###
### stage 2 sub-goal constraints
def stage_2_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the center of the gripper of the robot", "the area of the body of the red button", "the center of the gripper of the robot colinear with the normal of the area of the body of the red button by 10 cm">"""
    pc_gripper = get_point_cloud("the gripper of the robot", -1)
    pc_button = get_point_cloud("the body of the red button", -1)

    # Calculate the normal vector of the area of the body of the red button
    covariance_matrix_button = np.cov(pc_button.T)
    eigenvalues_button, eigenvectors_button = np.linalg.eig(covariance_matrix_button)
    button_normal = eigenvectors_button[:, np.argmin(eigenvalues_button)]
    if button_normal[np.argmax(button_normal)] < 0:
        button_normal = -button_normal

    # Normalize the normal vector
    button_normal = button_normal / np.linalg.norm(button_normal)

    # Calculate the target position for the gripper
    button_center = np.mean(pc_button, axis=0)
    target_position = button_center + button_normal * 0.1  # 10 cm along the normal

    # Calculate the current position of the gripper
    gripper_center = np.mean(pc_gripper, axis=0)

    # Compute the cost as the distance between the gripper's current position and the target position
    cost = np.linalg.norm(gripper_center - target_position)
    return cost


### <stage constraints splitter> ###
### stage 3 sub-goal constraints
def stage_3_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the center of the gripper of the robot", "the center of the body of the red button", "the center of the gripper of the robot moves toward the center of the body of the red button by 100 cm">"""
    pc_gripper_previous = get_point_cloud("the gripper of the robot", -2)
    pc_gripper = get_point_cloud("the gripper of the robot", -1)
    pc_button = get_point_cloud("the body of the red button", -1)

    # Calculate the vector from the gripper's previous position to the button's center
    gripper_previous_center = np.mean(pc_gripper_previous, axis=0)
    button_center = np.mean(pc_button, axis=0)
    direction_vector = button_center - gripper_previous_center
    direction_vector = direction_vector / np.linalg.norm(direction_vector)  # Normalize the vector

    # Calculate the target position for the gripper
    target_position = gripper_previous_center + direction_vector * 1.0  # Move 100 cm (1 meter)

    # Calculate the current position of the gripper
    gripper_center = np.mean(pc_gripper, axis=0)

    # Compute the cost as the distance between the gripper's current position and the target position
    cost = np.linalg.norm(gripper_center - target_position)
    return cost


### <stage constraints splitter> ###
### stage 4 sub-goal constraints
def stage_4_subgoal_constraint1():
    """constraints: <"release">"""
    release()
    return


### <stage constraints splitter> ###
### stage 2 path constraints
def stage_2_path_constraint1():
    """constraints: <"path constraints", "the center of the gripper of the robot", "the center of the body of the red button", "the distance between the center of the gripper of the robot and the center of the body of the red button remains 10 cm">"""
    pc_gripper = get_point_cloud("the gripper of the robot", -1)
    pc_button = get_point_cloud("the body of the red button", -1)

    # Calculate the distance between the gripper's center and the button's center
    gripper_center = np.mean(pc_gripper, axis=0)
    button_center = np.mean(pc_button, axis=0)
    distance = np.linalg.norm(gripper_center - button_center)

    # Compute the cost as the deviation from 10 cm
    cost = abs(distance - 0.1)  # 10 cm
    return cost


### <stage constraints splitter> ###
### stage 3 path constraints
def stage_3_path_constraint1():
    """constraints: <"path constraints", "the center of the gripper of the robot", "the center of the body of the red button", "the distance between the center of the gripper of the robot and the center of the body of the red button remains unchanged">"""
    pc_gripper_previous = get_point_cloud("the gripper of the robot", -2)
    pc_gripper = get_point_cloud("the gripper of the robot", -1)
    pc_button = get_point_cloud("the body of the red button", -2)

    # Calculate the distance between the gripper's center and the button's center at the previous timestamp
    gripper_previous_center = np.mean(pc_gripper_previous, axis=0)
    button_previous_center = np.mean(pc_button, axis=0)
    distance_previous = np.linalg.norm(gripper_previous_center - button_previous_center)

    # Calculate the distance between the gripper's center and the button's center at the current timestamp
    gripper_center = np.mean(pc_gripper, axis=0)
    button_center = np.mean(pc_button, axis=0)
    distance = np.linalg.norm(gripper_center - button_center)

    # Compute the cost as the deviation from the previous distance
    cost = abs(distance - distance_previous)
    return cost


### <stage constraints splitter> ###
object_to_segment = [
    "the gripper of the robot",
    "the body of the red button",
]