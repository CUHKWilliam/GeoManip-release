def stage_3_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the center of the gripper of the robot", "the center of the body of the red button", "the center of the gripper of the robot moves toward the center of the body of the red button by 100 cm">"""
    pc_gripper_previous = get_point_cloud("the gripper of the robot", -2)
    pc_gripper = get_point_cloud("the gripper of the robot", -1)
    pc_button = get_point_cloud("the body of the red button", -1)

    # Calculate the vector from the gripper's previous position to the button's center
    gripper_previous_center = np.mean(pc_gripper_previous, axis=0)
    button_center = np.mean(pc_button, axis=0)
    direction_vector = button_center - gripper_previous_center
    direction_vector = direction_vector / np.linalg.norm(direction_vector)  # Normalize the vector

    # Calculate the target position for the gripper
    target_position = gripper_previous_center + direction_vector * 1.0  # Move 100 cm (1 meter)

    # Calculate the current position of the gripper
    gripper_center = np.mean(pc_gripper, axis=0)

    # Compute the cost as the distance between the gripper's current position and the target position
    cost = np.linalg.norm(gripper_center - target_position)
    return cost

