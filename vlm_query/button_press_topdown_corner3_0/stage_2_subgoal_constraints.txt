def stage_2_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the center of the gripper of the robot", "the area of the body of the red button", "the center of the gripper of the robot colinear with the normal of the area of the body of the red button by 10 cm">"""
    pc_gripper = get_point_cloud("the gripper of the robot", -1)
    pc_button = get_point_cloud("the body of the red button", -1)

    # Calculate the normal vector of the area of the body of the red button
    covariance_matrix_button = np.cov(pc_button.T)
    eigenvalues_button, eigenvectors_button = np.linalg.eig(covariance_matrix_button)
    button_normal = eigenvectors_button[:, np.argmin(eigenvalues_button)]
    if button_normal[np.argmax(button_normal)] < 0:
        button_normal = -button_normal

    # Normalize the normal vector
    button_normal = button_normal / np.linalg.norm(button_normal)

    # Calculate the target position for the gripper
    button_center = np.mean(pc_button, axis=0)
    target_position = button_center + button_normal * 0.1  # 10 cm along the normal

    # Calculate the current position of the gripper
    gripper_center = np.mean(pc_gripper, axis=0)

    # Compute the cost as the distance between the gripper's current position and the target position
    cost = np.linalg.norm(gripper_center - target_position)
    return cost

