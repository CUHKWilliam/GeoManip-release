### <stage constraints splitter> ###
### stage 1 sub-goal constraints
def stage_1_subgoal_constraint1():
    """constraints: <"grasp", "the handle of the hammer"> """
    return grasp("the handle of the hammer")

### <stage constraints splitter> ###
### stage 2 sub-goal constraints
def stage_2_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the head of the hammer", "the head of the nail", "the head of the hammer is directly above the head of the nail by 5 cm">"""
    pc1 = get_point_cloud("the head of the hammer", -1)
    pc2 = get_point_cloud("the head of the nail", -1)

    # Compute the center of mass (mean position) for the hammer head and nail head
    hammer_head_center = np.mean(pc1, axis=0)
    nail_head_center = np.mean(pc2, axis=0)

    # Calculate the horizontal distance (x, y coordinates) between the centers
    horizontal_distance = np.linalg.norm(hammer_head_center[:2] - nail_head_center[:2])

    # Calculate the vertical distance (z coordinate) between the centers
    vertical_distance = hammer_head_center[2] - nail_head_center[2] - 0.05

    # Cost is the sum of deviations from the ideal position
    cost = abs(vertical_distance) + horizontal_distance
    return cost

### <stage constraints splitter> ###
### stage 3 sub-goal constraints
def stage_3_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the head of the hammer", "the head of the nail", "the head of the hammer moves toward the head of the nail by 10 cm">"""
    pc1_previous = get_point_cloud("the head of the hammer", -2)
    pc1_current = get_point_cloud("the head of the hammer", -1)
    pc2 = get_point_cloud("the head of the nail", -1)

    # Compute the direction vector from the hammer head to the nail head
    direction_vector = np.mean(pc2, axis=0) - np.mean(pc1_previous, axis=0)
    direction_vector = direction_vector / np.linalg.norm(direction_vector)  # Normalize the vector

    # Compute the target position of the hammer head
    target_position = np.mean(pc1_previous, axis=0) + direction_vector * 0.10

    # Cost is the deviation of the current hammer head position from the target position
    cost = np.linalg.norm(np.mean(pc1_current, axis=0) - target_position)
    return cost

### <stage constraints splitter> ###
### stage 4 sub-goal constraints
def stage_4_subgoal_constraint1():
    """constraints: <"release"> """
    release()
    return

### <stage constraints splitter> ###
### stage 2 path constraints
def stage_2_path_constraint1():
    """constraints: <"path constraints", "the head of the hammer", "the head of the nail", "the head of the hammer remains directly above the head of the nail">"""
    pc1 = get_point_cloud("the head of the hammer", -1)
    pc2 = get_point_cloud("the head of the nail", -1)

    # Compute the center of mass (mean position) for the hammer head and nail head
    hammer_head_center = np.mean(pc1, axis=0)
    nail_head_center = np.mean(pc2, axis=0)

    # Calculate the horizontal distance (x, y coordinates) between the centers
    horizontal_distance = np.linalg.norm(hammer_head_center[:2] - nail_head_center[:2])

    # Cost is the horizontal distance
    cost = horizontal_distance
    return cost

### stage 3 path constraints
def stage_3_path_constraint1():
    """constraints: <"path constraints", "the head of the hammer", "the head of the nail", "the head of the hammer moves directly toward the head of the nail">"""
    pc1_previous = get_point_cloud("the head of the hammer", -2)
    pc1_current = get_point_cloud("the head of the hammer", -1)
    pc2 = get_point_cloud("the head of the nail", -1)

    # Compute the direction vector from the hammer head to the nail head
    direction_vector = np.mean(pc2, axis=0) - np.mean(pc1_previous, axis=0)
    direction_vector = direction_vector / np.linalg.norm(direction_vector)  # Normalize the vector

    # Compute the movement vector of the hammer head
    movement_vector = np.mean(pc1_current, axis=0) - np.mean(pc1_previous, axis=0)

    # Cost is the deviation of the movement vector from the direction vector
    cost = np.linalg.norm(movement_vector - direction_vector)
    return cost

### <stage constraints splitter> ###
object_to_segment = [
    "the handle of the hammer",
    "the head of the hammer",
    "the head of the nail",
]