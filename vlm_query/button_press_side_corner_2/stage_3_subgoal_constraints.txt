def stage_3_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the center of the gripper of the robot", "the center of the body of the red button", "the center of the gripper of the robot moves toward the center of the body of the red button by 30 cm">"""
    pc_gripper_previous = get_point_cloud("the gripper of the robot", -2)
    pc_gripper = get_point_cloud("the gripper of the robot", -1)
    pc_button = get_point_cloud("the body of the red button", -1)

    # Compute the center of the gripper and the button
    gripper_center_previous = np.mean(pc_gripper_previous, axis=0)
    gripper_center = np.mean(pc_gripper, axis=0)
    button_center = np.mean(pc_button, axis=0)

    # Compute the direction vector from the gripper's previous position to the button
    direction_vector = button_center - gripper_center_previous
    direction_vector = direction_vector / np.linalg.norm(direction_vector)  # Normalize

    # Compute the target position for the gripper
    target_position = gripper_center_previous + direction_vector * 0.3  # Move 30 cm toward the button

    # Compute the cost as the distance between the gripper's current center and the target position
    cost = np.linalg.norm(gripper_center - target_position)
    return cost

