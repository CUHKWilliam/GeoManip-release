def stage_2_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the center of the gripper of the robot", "the area of the body of the red button", "the center of the gripper of the robot colinear with the normal of the area of the body of the red button by 10 cm">"""
    pc_gripper = get_point_cloud("the gripper of the robot", -1)
    pc_button_area = get_point_cloud("the body of the red button", -1)

    # Calculate the normal vector of the area of the body of the red button
    covariance_matrix_button = np.cov(pc_button_area.T)
    eigenvalues_button, eigenvectors_button = np.linalg.eig(covariance_matrix_button)
    button_normal = eigenvectors_button[:, np.argmin(eigenvalues_button)]
    if button_normal[np.argmax(button_normal)] < 0:
        button_normal = -button_normal

    # Calculate the vector from the gripper center to the button area center
    gripper_center = np.mean(pc_gripper, axis=0)
    button_area_center = np.mean(pc_button_area, axis=0)
    vector_to_button = button_area_center - gripper_center

    # Normalize the vector
    vector_to_button = vector_to_button / np.linalg.norm(vector_to_button)

    # Compute the dot product to check colinearity
    dot_product = np.dot(vector_to_button, button_normal)

    # Calculate the distance to ensure the gripper is 10 cm away
    distance = np.linalg.norm(button_area_center - gripper_center) - 0.1

    cost = abs(1 - abs(dot_product)) * 5 + abs(distance)
    return cost

