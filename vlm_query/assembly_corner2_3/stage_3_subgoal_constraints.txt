def stage_3_subgoal_constraint1():
    """constraints: <"sub-goal constraints", "the inner surface of the round ring of the green object", "the outer surface of the red stick of the red object", "the inner surface of the round ring of the green object is in contact with the outer surface of the red stick of the red object">"""
    pc1 = get_point_cloud("the inner surface of the round ring of the green object", -1)
    pc2 = get_point_cloud("the outer surface of the red stick of the red object", -1)

    # Compute the distance between the inner surface of the ring and the outer surface of the stick
    distances = np.linalg.norm(pc1[:, None, :] - pc2[None, :, :], axis=-1)
    min_distance = np.min(distances)

    # The cost is the deviation from zero (perfect contact)
    cost = abs(min_distance)
    return cost

def stage_3_subgoal_constraint2():
    """constraints: <"sub-goal constraints", "the center of the round ring of the green object", "the center of the body of the red stick of the red object", "the center of the round ring of the green object moves along the center of the body of the red stick of the red object by 5 centimeters">"""
    pc1_previous = get_point_cloud("the round ring of the green object", -2)
    pc1_current = get_point_cloud("the round ring of the green object", -1)
    pc2 = get_point_cloud("the body of the red stick of the red object", -1)

    # Compute the center of mass for the round ring and the red stick
    ring_center_previous = np.mean(pc1_previous, axis=0)
    ring_center_current = np.mean(pc1_current, axis=0)
    stick_center = np.mean(pc2, axis=0)

    # Compute the direction vector from the previous ring center to the stick center
    direction_vector = stick_center - ring_center_previous
    direction_vector = direction_vector / np.linalg.norm(direction_vector)

    # Compute the target position for the ring center
    target_position = ring_center_previous + direction_vector * 0.05

    # Compute the cost as the deviation from the target position
    cost = np.linalg.norm(ring_center_current - target_position)
    return cost

